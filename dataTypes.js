// || 8种 基本数据类型：7种原始类型、1种引用类型
// * 原始类型：原始类型的值只包含一个单独的内容，比如字符串、数字
// * 而object类型(即复杂数据类型，非原始数据类型)，包含的是数据的集合

// $ **************************************************************************
// || 1. Number类型 
// * 整数(integer)、浮点数(float)
// * 范围 ±(2*e53 - 1)
// * ”特殊数值“（special numeric values）：Infinity(无穷大), -Infinity, NaN

// || (1). Infinity
// * 可以通过除以0来得到
console.log(1 / -0);
// * 或 直接使用Infinity
console.log(Infinity);

// || (2). NaN
// * NaN代表 一个计算错误，一个不正确的 或 未定义的数学操作 所得到的结果
// * NaN是粘性的，任何对NaN的进一步数学运算都会返回NaN
console.log(0 + NaN);
// ! 注意：NaN**0, return 1
console.log(NaN ** 0);
// $ **************************************************************************



// $ **************************************************************************
// || 2. BigInt类型
// * 用于 任意长度的整数
// * 在整数字段末尾添加n来创建BigInt值
{
  const myBigInt = 123456789012345678901234567890123456789n;
  console.log(myBigInt);
}
// $ **************************************************************************



// $ **************************************************************************
// || 3. String类型
// * string 必须被引号包裹
// * 3种包含string的方式：单引号、双引号、反引号
// ! `` 功能扩展引号，可将变量或表达式包裹在${...}中，以嵌入到字符串中
// * ${...}，return string
{
  let yourName = "John";
  console.log(`Hola, ${yourName}`);
  console.log(`123 + 456 = ${123 + 456}`);
  console.log(typeof `${22 + 50}`);
}

// $ **************************************************************************



// $ **************************************************************************
// || 4. Boolean类型
// * true or false
// * 作比较的结果 返回布尔值
{
  let nameFieldChecked = true;
  let ageFieldChecked = false;
  console.log(0 >= NaN);
  console.log(NaN >= NaN);
  console.log(NaN == NaN); // ? 
  console.log(NaN === NaN); // ? 
}
// $ **************************************************************************



// $ **************************************************************************
// || 5. Null值
// * 构成了一个独立的类型
// * 只包含null值
// * 仅代表 无、空、值未知的特殊值
// * 并不是一个 ”对不存在的object的引用“ 或 ”null指针“
{
  let myAge = null; // 表示myAge的值是未知的
  console.log(myAge);
}
// $ **************************************************************************



// $ **************************************************************************
// || 6. Undefined值
// * 跟null值一样，自成一类型
// * undefined，表示 未被定义的，未被赋值的
// * 如果一个变量已声明，但未赋值，那么这个变量的值就是undefined
{ 
  console.log("\nUndefined值：")
  let myAge;
  console.log(myAge);
}
// $ **************************************************************************

// ! 通常，使用 null 将一个“空”或者“未知”的值写入变量中，而 undefined 则保留作为未进行初始化的事物的默认初始值。

// $ **************************************************************************
// || 7. Oject类型
// * 用于存储 数据集合或更加复杂的实体
// * function 隶属于 object类型
// $ **************************************************************************


// $ **************************************************************************
// || 8. Symbol类型
// * 用于 创建 对象的唯一标识符
// $ **************************************************************************



// $ **************************************************************************
// || typeof 运算符
// * 返回参数的类型
// * 数据类型 检验
// * 以字符串的形式 返回 类型名称
{ 
  console.log("\ntypeof 运算符：");
  console.log(typeof undefined);
  console.log(typeof null); // ? return object 官方承认的 typeof 错误，这个问题来自于 JavaScript 语言的早期阶段，并为了兼容性而保留了下来。null 绝对不是一个 object。null 有自己的类型，它是一个特殊值。typeof 的行为在这里是错误的。
  console.log(typeof 233n);
  console.log(typeof prompt); // ?
  console.log(typeof Math);
  console.log(typeof Symbol("id"));
}
// * typeof is an operator, not a function. 
// The parentheses(圆括号) here aren’t a part of typeof. 
// It’s the kind of parentheses used for mathematical grouping. ()是用来作计算的
{
  console.log(typeof(1+2));
}

// $ **************************************************************************


